- https://www.w3.org/TR/css-color-4https://www.w3.org/TR/css-color-4 is a
  good document on color in CSS and the specs

- https://en.wikipedia.org/wiki/List_of_color_spaces_and_their_uses 
    - The plethora of jargon revolves around two major tasks:  1) to
      specify the differences in color based on human perception in some
      way that represents things approximately perceptively and 2) encoding
      video data that looks good and can be done in real time.

- Chromaticity
    - I like the 1931 and 1976 chromaticity diagrams.  Using Bruton's
      wavelength to RGB approximation, make these plots using the g
      library.  This plot should be made with thousands of small square
      boxes of colors at a reasonably high resolution so that it results in
      a seemingly continuous bitmap at lower resolutions.  I like the
      inclusion of the Planck locus (see
      https://en.wikipedia.org/wiki/File:PlanckianLocus.png), but it should
      be in kK and use small dots rather than lines.  Stick on molten
      aluminum also.
    - Include a plot on the 1931 chromaticity diagram of the sRGB space as
      in the picture
      https://en.wikipedia.org/wiki/File:SRGB_chromaticity_CIE1931.svg
      Also, https://en.wikipedia.org/wiki/SRGB gives the data for the sRGB
      primaries in terms of xyY:
        - red:  0.64, 0.33, 0.2126
        - grn:  0.30, 0.60, 0.7152
        - blu:  0.15, 0.06, 0.0722
        - wht:  0.3127, 0.3290, 1
        - It is not possible to represent color outside the diagram's
          triangle, which is well inside the set of colors visible to the
          typical human.
    - My Dell P2415Q monitor's rating is 1.07 billion colors and the color
      gamut is 99% of sRGB.  Viewing angle is 178 deg typical.  Output is
      300 cd/m2 typical.

- ColorNum
    - This tool has become so useful it should be the basis of everything.
      Especially get the constructor to recognize as many color specifiers
      as possible.  Even '138  43 226  BlueViolet' in an rgb.txt file
      should be recognized because of its three consective integer values.
    - The color space transformations in colorcoord.py should be moved into
      the ColorNum module.

- cnvclr.py
    - Add an option to sort by rgb, hsv, or hls.

- rgbdata.py
    - Put code into a directory rgbdata
    - Change Color() to ColorNum()
    - Get rid of Color objects in rgb.py

- clrinterp.py 
    - Give two color specs in hex on the command line and you'll get a
      stated number of colors printed out in text that interpolate between
      the two given colors.

- Finish view.py

- ColorNum objects need settable attributes to allow the color to be changed.
  For example, you'd want the r and R attributes to be [0, 1] and [0, 255]
  values; setting it would change the object's color.  Unfortunately, then
  this means the object isn't immutable anymore unless the attributes
  return new ColorNum objects, which is probably the preferred behavior, as
  you'd want the colors to be keys in dictionaries.  Alternatively, the
  hash value could be the id value at creation, allowing a mutable object.
  However, I think keeping immutability is probably best.
    - An approach could be to have a ColorFactory object that returns
      ColorNum objects.

- Base color naming on the spectrum.  Put wavelength markers in the
  spectrum.ppm plot in /pylib/pgm/colors.  Actually, need to use g.py to
  generate a working plot.  Since the wavelengths go from about 400 to 700
  nm, the nearest nm wavelength can be a fundamental starting point for a
  color name.  Use names vio, blu, cyn, grn, yel, orn, red and pick wl
  bounds for each color.  While wholly subjective, it allows color naming
  with easy to recognize nomenclature.
    - The range of Bruton's linear approximation is from 380 to 780 nm for
      a range of 400 nm.  Let's use units of 10 nm, so the range is from 38
      to 78.  Here are the approximate locations, range, and approximate
      width:
        -               Range     Width
        - violet39      38-40       2
        - purple41      40-42       2
        - blue44        43-45       2
        - cyan47        46-49       3
        - green52       50-54       4
        - yellow58      54-60       6
        - orange62      61-63       2
        - red70         64-78      14

- Color cube plotting
    - https://people.csail.mit.edu/jaffer/Color/css3-rgb.pdf shows an
      example
    - G and B are in front plane; G goes to right and B goes up.  R goes to
      the back.
        - Black is front lower left and white is rear upper right.
    - This should be straightforward to write with the g library.
        - Make two images for a stereoscopic projection.
    - Make three different views so you can get an "engineering" feel for
      where things lie.
    - This would be a good demo for the g library.

