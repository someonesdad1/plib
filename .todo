Active:  /plib/.todo

    - util.py
        - fsig() should be changed to a thread-safe and process-safe class by using
          threading.Lock and multiprocessing.Lock.

    - astr.py 
        - Move functionality to util.py
        - astr.py is used in 
            - /plib:  abbreviations.py asciify_make.py astr.py bama.py color.py
              colorcoord.py colorhues.py eevblog_data.py elements.py extensions.py
              interval.py julian.py meeus.py novas.py rgbdata.py u.py wl2rgb.py
            - /plib/pgm:  arecibo.py current_date.py date.py de.py ds.py halflife.py
              hpj.py igor.sibilant_c.py mathfuncs.py oom.py random_phrase.py
              sunriseset.py wl.py words_syllables.py

    - trigger.py
        - Problem caused by ruff formatting the file and putting a space after every
          leading '#' character when they look like comments.
            - Fix:  change leading '#' to '##' and things will work
        - Keys used: the string between the ∞test∞
              strings is use to determine how to test:
            - run
            - --test
            - None
            - ["test/cmddecode_test.py"] 
            - ignore
            - none

    - pgm/dbl.py
        - After 'ruff format' puts blank lines inside of nested functions, the script
          needs to remove these lines if not in a triple quoted string.
        - If encounter 'if __name__ == "__main__":', insert a newline before it.

    - Investigate uv https://docs.astral.sh/uv
        - Fast Python package and project manager
        - By creators of ruff

    - Learn rust
        - Write a cli:  https://rust-cli.github.io/book/tutorial/index.html
        - Install:  https://www.rust-lang.org/tools/install
            - WSL:  "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
        - Book:  https://www.rust-lang.org/learn

    - pgm/ptoken.py python_file fn_name regex
        - Script to take a set of python scripts and print out the tokens that match
          those used in the function fn_name.
            - Use case:  see if the 'sin' or 'math.sin' token is used in a routine.

    - abbrev.py
        - Finds likely abbreviations/acronyms in files
        - Lists definitions for the ones found
        - Repository for the one I like to use, with definitions
            - CBC (commercial battery charger) ooo μP IDE wrt Ah A*h A*hr amd anova ansi argc
              argv asap asme AT atm ATO ATX awk bk b&k bnc bsky buff cdf cephes cfg chr
              chs CC clf clrg clst cmd cmdline cmds codec cols com comm comms conda
              const config conj cpi cpp cruft css csv ctags ctrl cyg daq dat dbf dbg dbm
              dbl dbus dd def del demag denom descr dest det df dict diff dir diy dll
              dlock dm42 dmath doc docs dos dps dpstr dr dtype dx dy edu ee elec elif
              emf eng engsi enum eof eps eqn er esc esr et eva evac eval expr ext flt
              fmt fp ft fyi gdssw gdb gc gcc git gov gpg gps grep gsl gz hc hcpy hdr hld
              hls hms hpj href iet im ii imag img impl inf init int inv ip ir iso ix
              jpeg jpg jpl kbhit kdiff kft kph kps ksh kw kwh lj lbf lbm lcd len lib
              linalg linenum linreg ll log ln loc loo ls lt manufy mawk md med meg mic
              min mingw mintty mk mkdir mks mobi mol mon mp3 mp4 mpc mpf mpi
              mpja mrtc MSE msg MSR mysql nah nav ncdf nd ndarray nema netrw
              NIST nl nltk nobreak noic nomagic nop npos npp nsa num odict odt oft
              optlist os osl papa pcl PCs pdb pfft pfind pgp php pil pkg plib png pnp
              popen ppf ppm ppb precis prr prst ps psa psi pto putch pwd pwm pwr pypi
              pyvenv pyver pyw rad RCS rdbuf redir regex regexp relpath reltol remap
              repr req lhs rhs rmdir rd roms rpath rpo rps rst rtd rtz sa sat sbin SCCS
              sci scipy SCO sed seq seti sfpm sha shcs shl shlvl shtml sig sigfig
              siglent simpy sinesticks skrip sp spc sr src srcfile SSE SSR SSTO stat
              stats s stddev stdev STP str sts su svg svn sw sx sxx sxy sy sympy sys
              sysop syy techref temp tempfile tex texmf tgz thd tmbr tmux toml Torx tp
              trans trie troff Tsat tsort tst tty txt tz uint unc unf uni un u unx URL
              URI USB usd usr uss utf utf8 va var vars vcs venv vi vim viemu vimrc vip
              voa vs vu vxware wav wd wdiff wdr wl lc wsl www wx xargs xfm xlabel xlim
              xls xml xrange xref xx xxd xyzzy YAML Yhat Ybar ylabel ymax ymin xmax xmin
              yy __call__ __dict__ __doc__ __floordiv__ __getattr__ __gt__ __iadd__
              __iand__ __idiv__ __ifloordiv__ __ilshift__ __imod__ __imul__ __init__
              __ior__ __ipow__ __irshift__ __isub__ __itruediv__ __ixor__ __le__ __lt__
              __neg__ __pos__ __rfloordiv__ __rtruediv__ __setattr__ __truediv__ dmm
              dupont eeprom leds lifepo mux opto romex SCPI SMD Uno wifi rv bms 

    - Troubleshooting
        - It could be time to try to write a fairly extensive overview of
          troubleshooting, which is using various skills to figure out the cause of a
          problem.  
        - Probably the single most significant idea I've found useful in a lifetime of
          troubleshooting is "there's a unique physical cause of this problem you're
          seeing".  
            - This notion is very useful in the context of a group of humans with a
              variety of experiences trying to quickly find/fix a problem.  Less
              technical or experienced people can generate wacky or multiple-cause
              suggestions and can cause a bad waste of precious resources, so core needs
              are objectivity, experience, and good leadership.
            - Other methods are things that provide contrast, temporal coincidence,
              is/is not characteristics, polling the experts/web, using knowledge to
              rule things out (but can be dangerous and make you overlook something)
        - https://blog.parr.us/2014/11/17/the-essentials-of-debugging/ talks about it
          from a programming standpoint, but misses some key things (e.g., "debuggers
          are evil"), figuring out what's wrong with some code running on hardware where
          you have no way of connecting to it (e.g. no printf like debugging boot LJ
          code).
            - His essentials are:  reproducability, reduction, deduction, experiment,
              experience, tenacity
            - Another lesson:  reluctance of a sw team to adopt a new version of a
              compiler because of the massive turmoil caused by compiler bugs
        - The process seems to revolves around constructing the proper mental models to
          interpret the signals the system is giving you.  This, in turn, seems to argue
          for significant education in math, physics, engineering, CS, behavior, etc.
            - A good strategy can be to look at the major disciplines and ask the
              experts for a high level precis or distill it yourself.  Example:  in
              troubleshooting electrical problems, some core ideas that are useful are
              conservation of charge/energy and the lumped parameter model.  Then you
              need to know the boundaries of where such ideas can and cannot be applied.
            - Another might be the skill to recognize random vs. pseudorandom behavior
              and to be able to know when you have enough information to make good
              guiding decisions.
        - KT analysis is a good framework, but I believe at least its text is
          copyrighted -- but the ideas are valuable, particularly things like "looking
          beyond the fix".

    - wrench.py
        - Have it put + by the wrenches that I have

    - fish.py
        - See if pgm/fish.py can be sped up by about a factor of 3 by using the
          multiprocessing library.  Note python can't run multiple threads, so this is
          the only available way to use more cores.  It should get the solution time
          down to about 1 minute with my current computer and a late version of python.
          Of course, the solution is only of intellectual interest, but could introduce
          a way to get speedups in other programs.
        - See dev/scrdatafile.py below

    - root.py
        - Why are RootFinder and Crenshaw present?  RootFinder is Jack's algorithm, so
          is the Crenshaw function obsolete?  I believe the Crenshaw routine is a
          slightly updated form that used Jack's observation that the routine would
          often converge to a solution better than what you asked for.  This should be
          the standard routine.
            - I'd like RootFinder to be the general purpose tool.  It should have a
              dbgstream argument to let you see convergence like Crenshaw does.
        - This was written before closures existed in python; it should be rewritten to
          take advantage of them.  Example is GetVrefFunction() in pgm/diode.py which
          returns a closure to use by the rootfinder.

    - Python lex-yacc by Beazley
        - See ch 191 in PythonNotesForProfessionals.pdf pg 788
        - Link broken; use https://github.com/dabeaz/ply

    - Advanced python mastery by Beazley
        - https://github.com/dabeaz-course/python-mastery
        - Clone the repository, see PythonMastery.pdf for the presentation slides.
        - This was a 4-5 day class, will take 30-50 hours of work

    - pgm/diode.py
        - Use rootfinder instead of iteration

    - resistors.py
        - Needs to reflect current resistors:  1/4 W and 2 W

    - transpose.py
        - I often need the transpose of a string array of numbers, so make this transparent to use
          as a module with clear instructions.
        - Example:  LEDs voltage drops as a function of current:  the data file gives it in a
          matrix table, but I need the transpose of the data as a set of row vectors.
        - Make it the Numbers() function
            - Go through the sequence of strings.  If they can all be successfully converted to
              integers, do so.  Otherwise, convert to flt; if exception, use cpx.
            - Pass in a keyword numtype for a specific conversion

    - pgm/lookup.py
        - This is a tool I used a lot.  It needs to be fixed.
        - This relies on Wordnet and was a lot of work.  /pylib/types_of_words/WordNet
        - The raw stuff needs to be moved to /words and checked in to github.  Then the overall
          stuff needs to be examined to see how it works again.  Finally, construct the needed
          /words/words.* files for dict and lookup to work, as I use them a lot.
        - The Wordnet stuff is too complicated for most work (it's for stuff academic use).
          Stratify the wordlists into e.g. 3 layers:  easy, moderate, arcane.  This will take a lot
          of time, but will be a valuable set of words.
        - Get rid of the old dictionary use in /pylib and use the stuff in /words.  
            - Use 🔵🟢🟡🟠🔴 to indicate which dict matched, with 🔵 representing the easiest dict
              with harder ones to the right.

    - pgm/comp.py
        - Inventory the boxes to get quantities

    - pspell.py
        - Utility to spell check source code.  I keep finding spelling errors in my old scripts
          and a tool should be able to do this reasonably well.
        - Use the algorithm from xref.py to split tokens into words at capital letter boundaries or
          underscores
        - Identify the language by the file extension or pass it in as a keyword
        - The core case-sensitive words file should end up in /words and should be classified by
          things like human names, language, programming language specificity, etc.
        - A first experiment might be to get all the tokens from all of the scripts in /plib.  With
          "import timer, get" and the following code, it took 7.4 s to tokenize all the python
          scripts:

            for i in P("/plib").glob("**/*.py"):
                dq = get.Tokenize(open(i).read())

    - pgm/ds.py
        - Need a feature to define default documents so they open on the first search.
            - Example:  I have 3 versions of the HP427A manual:  1970, 1972, 1983.  The 1983 one
              covers my instrument best, but it can take time to render in Sumatra.  I'd like to
              define the 1972 version as the one to open by default, but e.g. use the -e option to
              let me see all the options if I don't want the default.  When the default is used,
              print a message to stdout that this happens so that the user knows there's more to
              see.

    - pgm/rms.py
        - Numerical aid to dealing with various functionals used to measure voltage:  RMS, ACCRMS,
          peak-to-peak voltage, 0-to-peak voltage, average, absolute average, Fourier coefficients
        - Common use cases
            - You have a 1 V RMS 1 kHz sine wave with a +0.37 V DC offset.  What are the resulting
              functionals of the waveform?
            - You set up a pulse on a function generator with -2 V low and 3.3 V high.  The
              duty cycle is 22% and frequency is 1.22 kHz.  What are the functionals?
        - These problems can be done with waveform.py and numpy.
        - From studying my tools like the HP scope, Aneng meters, and HP analog meters, predict
          what their measurements will be.

    - hobbyutil
        - Get rid of anything that's in /plib
        - This project hasn't been updated because the old script is unmaintained and it's a lot of
          work converting to makefiles.
        - It would make more sense to standardize on a set of directories, construct a content file
          in that directory for its files (descriptions and links), and use a top-level script to
          combine everything.  Then the file content is manually updated as needed.
        - Still, it needs a way to determine when things are out of date.

    - Help to remember how to install conda stuff
        - Often there are python installations I'd like, such as 'pip install plotext'
          (https://pypi.org/project/plotext/).  But as I recall, it's better to use conda to do the
          installation.  But I have no remembrance of doing this stuff a year or so ago, so the
          details need to be put in the python help document.

    - Check out https://github.com/nschloe/termtables for printing tables in the terminal

    - pgm/db.py
        - -r option changes the reference resistance R in Ω (600 Ω default)
        - Change existing -r to -s option (step of table); allow n to be a float > 0
        - Change command line to 'low_dB high_dB [step]' for generating table

    - pgm/ac.py
        - Calculate the RMS, average, and peak functionals for common AC waveforms.  Ok to use
          numpy and scipy.
        - This script should reproduce the graphs in Appendix II of HP's AN60 "Which AC Voltmeter?"

    - pgm/goto.py
        - Add -o option that opens Explorer on a selection's directory.  Use case:  'g -o hp' would
          open Explorer on the HP catalog directory.

    - color.py
        - /plib/rgb
            - Fix up chromaticity directory's stuff
        - TRM needs a way to ensure all attribute access returns "" when .on is False.
            - https://realpython.com/python-getter-setter/
            - Probably the easiest way is to use __getattr__ and __setattr__ in the above web
              page's example of a point
        - Add support to /plib/g/g.py
        - Use "grep -l '\<fg\>' *.py" to identify all files in /plib tree that use the old style
          color.py calls and update them to the modern form.
        - Obsolete rgb.py and any other old color stuff

    - diet
        - Hacker's diet is sound, but too wordy.  I also don't care to use spreadsheets.  However,
          the moving average plot of weight is a good idea and this would likely best be done by
          using standard control chart techniques.
        - Write a script that collects the weight data, then prints out relevant control details.
          It can also include graphs, but I suspect the simple text report will be all that's
          needed.

    - units
        - GNU units is a good program, but I don't care for its command line interface.  Turn it
          into a specialized REPL tool that allows you to set variables and convert them amongst
          compatible units, then doing desired calculations.
        - Another idea:  incorporate its functionality in hc.py
            - This would give hc.py the ability to calculate with units and allow for detecting
              incompatible unit operations without having to write a complicated library
        - Need to come up with some example use cases for desired behavior before designing
        - Variable assignment
            - v = expression
            - v = expression unit_expression
        - Allow command lines to be expressions
            - A sequence of one or more spaces is a multiplication
                - '3   v v' is interpreted as '3*v*v'
            - Use python's syntax
            - Optional:  only allow one division '/' on a line and it groups the two together by
              inserting parentheses
            - An element 'a b' on a line is a number with a unit

    - pgm/exp.py
        - This will be a database of experiments I run
        - Summarize the results (only for -v option)
        - Date run
        - Category
            - elec
            - mech
            - other
        - Point to the relevant document
            - Use -o to open the document
        - Print the relevant heading in the document
        - Develop a set of keywords to get to things quickly
            - Example:  a number of experiments have looked at the maximum currents that can be
              used in various wires or cables.  Thus, two keywords could be 'wire' and 'current'.
              Or since I use "chassis" currents for this meaning, 'chass' could be a keyword.
        - Because an experiment might want to be repeated, also include the storage location and
          serial number of the relevant experimental equipment

    - hc.py
        - Add conversions
            - mm and in
            - lb and kg
            - qt and L

    - pgm/resistor.py
        - Need to add in my stock of 1 W resistors
        - Check current stock of resistors and make sure all are covered

    - lwtest.py
        - For easier writing/grouping of test cases, it would be nice to be able to nest testing
          functions and have them found and executed rather than having to call each nested
          function.  This shouldn't be on by default, but turned on by a keyword to run().
        - Write a utility function FindTestFunctions(*files) that finds test functions and returns
          them in a list in the order they were found in a file.  This handles the use case of
          making a demo by setting the regexp to "^Demo_" and running the functions in the order
          they were encountered in the file.
            - Example

                    def x():
                        # This function contains a test function ytest that we want to run
                        def ytest():
                            print("in ytest")
                        print("in x")
                        x.ytest = ytest

                    x()
                    print(x.__dict__)
                    # Run ytest
                    func = x.__dict__["ytest"]
                    func()

              This prints 

                    in x
                    {'ytest': <function x.<locals>.ytest at 0x7fa870414900>}
                    in ytest

              Note x() had to be run to generate its local namespace.

              On the other hand, it could have been

                    def x1():
                        # This function contains a test function ytest that we want to run
                        def ytest():
                            print("in ytest")
                        print("in x")
                        ytest()

              and you'd have the same result.

    - tk
        - https://tkdocs.com/tutorial/firstexample.html
        - This could be a good tutorial to work through to learn to write GUI python code.
          Fortunately, miniconda3 contains python 3.11.5 that contains tk, so the first example
          works as given.
            - The tutorial is available as a $10 PDF and I'd think this could be a good reference
              manual to learn things from, as I hate paging through HTML cruft
        - Current, voltage, resistance, power
            - Good first tool
            - Solves equations when you pick one value as a constant.  Then the other uses a slider
              and the third is calculate.
            - Also does wire calculations; e.g., you pick a wire size and a desired current,
              voltage, or resistance and you see the relevant dependent parameters.  This would
              include % of chassis current to give a feel for the design limits.  You can also
              enter a resistivity relative to copper.

    - hobbyutil
        - Teeth
            - Dental care document and the reasons why
            - Old person's "wisdom" of "I wish I had taken better care of my teeth"
                - This was a comment by Laura at one of Trink's dinners
        - Summer heat
            - Managing heat in the summer (temperatures in °F)
            - The summer of 2024 was hot in the western US with near-record temperatures
                - Our city's hottest day was 1 °F lower than the hottest ever recorded in the
                  1890's
            - Our home's air conditioner is not capable of cooling the house off when temperatures
              get above 100 to 105 every day, particularly after our attic fan had failed after 35
              years of service
                - Attic temperatures get over 120, roof's plywood gets to 160
            - 2 strategies
                - Attic fan:  $120 unit 16"dia x10" deep, 1945 cfm, 18 cfm/W (==> 108 W, 0.9 A).
                  Set thermostat to run when temperature is above 50, as this pulls cool air into
                  the attic and removes a lot of stored heat.
                    - Cost $0.3 per day (always running), $9/month
                    - Old fan failed because I forgot to oil the sleeve bearings one year.  This
                      made me look for a new fan that uses ball bearings.  Unfortunately,
                      manufacturers' marketing people aren't smart enough to know this is a selling
                      point they should crow about, as cheap fan motors use cheap sleeve bearings.
                - Box fan(s):  exhaust air through window at one end of house.  Open windows at
                  other end of house, adjusting opening to try to get turbulent air flow through as
                  much of the house as possible.  I use two box fans of 70 W each.  They are wimpy
                  compared to my older box fans, but they do a surprisingly good job when run all
                  night and the outside night temperatures get below 65 °F.
                    - Cost $0.18 per day (11 hours/day), $5.4/month
                    - The basic tactic is to use this cheap airflow to cool off all the internal
                      surfaces of the house from about 10 pm to 9 am (11 hours).
                    - It works well enough that we don't need to use the air conditioner unless the
                      outside temperature gets to 100 °F all afternoon or more.
            - Contrast this to running the air conditioner for 6 hours per day.  Nameplate current
              is around 23 A at 240 V.  Assuming 0.9 power factor, this is a power of 5 kW.
                - Cost $3.5/day, $105/month
            - Conclusion:  Use of fans is 20 times cheaper.  Surprisingly, it's also more
              effective, particularly when the temperatures at night drop below 70.

    - Statistical tools
        - DAP https://en.wikipedia.org/wiki/DAP_(software) 
            - Command line tool for statistics
            - Too focused on C-type behavior and emacs
        - PSPP:  GNU tool at https://www.gnu.org/software/pspp/
            - Needs GNU scientific library, python 3.4+, iconv, Cairo 1.12+, zlipb, libxml2,
              gettext.  
                - Run configure with --without-gui to just build CLI version
            - GUI:  needs pkg-config, GTK+, GtkSourceView, GNU Spread Sheet Widget
        - An honest assessment is that it would likely make the most sense to have a dedicated
          Linux box to run this stuff on.

    - Programmer's index (see xxpgidx)

    - Acronyms
        - See https://en.wikipedia.org/wiki/List_of_acronyms:_0%E2%80%939 and e.g. 
          https://en.wikipedia.org/wiki/List_of_acronyms:_S
        - These can be screen-scraped to become a textual database
        - A script can be used to look things up or do text searches
        - Many include URLs to a relevant page

    - Functions
        - Way too many
        - Decide on a single letter command 
            - No args:  it will search for the bin-type commands and then execute them for you 
            - Give the bin-type command and it will execute it for you
        - This will likely cut number of commands by 2 or more

    - /words
        - Include verbs, nouns, adjectives, etc. from Wordnet

    - pgm/random_phrase.py
        - This is a handy script, but it should by default use a set of words much smaller
          than Wordnet's, as this leads to unfamiliar words like 'Phyllostachys' or
          'megasporangium'.  Edit things to use this simpler set of words, then include an option
          to select the full list.

    - pgm/weather.py
        - Use the extra width of terminal windows to make two columns for day and night
        - Lines are then the 6 forecast days
        - Use words 'rain snow tstorm wind sun cloudy low high
        - Give temps in C and F

    - hobbyutil
        - Stalled development is because of the PITA of converting to builds using make.
        - Test all python scripts with 3.11
        - Get rid of file size
        - Make HTML as short as possible and all on one line to make browsing quick

    - pgm/ad.py:  make a tool analogous to hd to dump text files so you can see location of Unicode
      characters and their value.  Can also use color coding.  For control characters, use things
      like U2400 to U2421.

    - /shop/software  Update these python scripts to current standards and put them in $pp

    - Spell check all scripts with a Usage function

    - pgm:  de.py, dia.py, drill.py have overlapping functionality.  Combine them into one tool.

    - pgm/dec.py needs to have color stuff upgraded.  Also look at making it not need the '-' to
      read from stdin, as this is such a common use case.

    - Analytic geometry document:  convert to LaTeX

    - xfmpy
        - xseq.py:  Fix syntax:  '2 8 1.1' doesn't give what I'd expect
        - Fix to work with python 3.11.5

    - pgm/ds.py
        - Add a -t option that only shows the document's title
        - Add ability to ignore '_old_' directories when encountered.  For e.g. /ebooks, this is a
          way of putting in stuff I want to keep but not see in the index.
            - Ideally, a -a option could be used to see the old stuff when desired.

    - frequent_symbols.py
        - Module to provide the library symbols I use frequently

    - pgm/halflife.py
        - The original source page can no longer be screen-scraped.  Find a better source of
          halflife data.  It may be that screenscraping wikipedia's element pages might be 
          the best approach.

    - Don't have OSL
        - /plib
            - asciify_make.py
            - atomic_mass.py
            - changed_datafile.py
            - clip.py
            - colorhues.py
            - dpdb.py
            - drillsizes.py
            - dt.py
            - extensions.py
            - flatten.py
            - fnl.py
            - format_numbers.py
            - fraction.py
            - frozendict.py
            - fsig.py
            - itersubclasses.py
            - iterutil.py
            - just.py
            - kbhit.py
            - license_data.py
            - linreg.py
            - listmath.py
            - module_dep.py
            - mpfmt.py
            - resistors.py
            - rgbdata.py
            - sizes.py
            - states.py
            - template.py
            - textcompare.py
            - wconio.py
            - win.py
            - wsl.py
        - /plib/pgm

    - pgm/xyz.py
        - Vet program
        - Update to new color.py
        - Check outputs in xyz.odt
            - Change "oC" to something with the degree symbol

    - pgm
        - Move 'ucd.nounihan.grouped.ver11.xml' to 'ucd.11.xml' to take up less space

    - pgm/chemical_names.py
        - /hobbyutil/science/chemical_names.pdf
        - Would make a good command line utility
        - Print the three columns to the screen width, wrapping as appropriate
        - Column widths are given as % of screen width

    - asc.py
        - Colorize some key items.  Use colors similar to char.
            - dec: wht, hex: lil, oct: sky, bin: yeld, char: whtl
        - In decimal, replace leading 0 with space
        - Fix the annoying display hiccup at 0x7f.
        - Allow -B to also be accessible as 'asc B'.  This should be doable because it can first be
          tested to see if it's a number for an offset; if not, then it's equivalent to -B.

    - pgm/bh.py
        - bash helper script
        - Examples of arguments:
            - '$-' see a list of the builtins in e.g. my help/content/bash file.
            - '${' accessing default values and pattern matching
        - This is aimed at an experienced user to get both syntax and a high level view of the
          command and its effects

    - pgm/ruler.py
        - Put in my usual Usage/ParseCommandLine stuff, as it's really an application, as I never
          use it as a library.
        - Put in an option that lets you define named colors for each group of 10 characters being
          printed.  For example, you can give 10 colors (with names e.g. in color.py) that are
          different.  Over time, these colors will be memorized and you'll be able to interpret
          things more quickly.
            - A useful option to add would be one that lets you give it a file or stdin and it would
              color the file's contents' columns with the same colors, making it easier to follow
              columns.
            - In fact, this points out that it would make more sense to have each dot in a section a
              different color, letting you identify the column in a section.  The 10 marks could be
              in different background colors to aid going down columns.

    - New: pgm/resistor_color_code.py
        - Print colors & values to the screen.
        - Alias it to rcc

    - pgm/ldir.py
        - Uses old color model and won't print out directories in color under WSL

    - Color stuff
        - /plib/pgm/colorsearch.py
            - Add an attribution of number 0 that includes the 24 short color names I use in the
              command clr
        - /plib/color.py
            - Reorder the colors in clr command so that they are in order of the optical spectrum.
              Make this the default ordering with 'w' (wavelength).  The 's' command's ordering
              should remain.
        - /plib/cdec.py
            - Should include an estimate of the wavelength to the nearest nm

    - Thermal model of a camper
        - Use it to estimate power need to maintain temperature
        - First order:  just look at heat loss through walls
        - Tent camper
            - Simple model:  piece of rectangular material.  All you need is the surface area and
              thickness to calculate heat flow through it.
        - ΔT:  common conditions when camping in the mountains is to be about freezing outside, so
          this should be the default calculation.  Thus, ΔT = 20 °C for most calculations.
        - Outside wind:  2 m/s (~5 mph), 5 m/s (11 mph), 10 m/s (22 mph)
        - Cp of air is 1.006 J/(g*K) over the temperatures of interest

    - /plib/pgm scripts
        - 0what.py
            - Look at a way of encoding how to run tests on every script if there is such a way.
        - To do
            - Inventory the set of scripts
            - Look for those in /elec, /shop, etc. that could be included
            - Look for opportunities to coalesce things
        - I'm not so sure there's anything to be gained from a calc/ dir, particularly now that a
          'what xxxx.py' tells me what the script does
        - A lot have evolved for practical calculations
        - Create a new directory for them? /plib/calc?
        - A helper document or script is needed to point to the correct tool
        - Major topics:  physics, astronomy, engineering, shop, math
        - Can any python modules be used to make calculations easier?

    - dev/scrdatafile.py
        - Script datafile library tool that uses multiprocessing to detect when a datafile has
          changed and alerts the calling context that it needs to take action.
        - This is also a good technique for speeding up the fish problem.
        - Run this script:  it's broken because /plib/timer.py:184 raises an exception
          because the timer isn't stopped

    - dividing_holes.py
        - Print a paper template to allow marking holes on a workpiece
        - See pg 35 of "The Home Shop Reader's Tips Book", 2005
        - Use a data file of:
            - units <str>       Defines units to use
            - center x, y       Where center of circles are
            - dia_mark          Diameter of marking circle(s) separated by spaces
            - circle dia num offset
                - Each circle of holes
                - dia               Diameter of this hole circle
                - num               Number of equally-spaced holes
                - offset (optional) Degrees of first hole from polar axis
        - Make a lathe fixture that is held in a 4-jaw that holds the plate being made.  You adjust
          it with a wiggler to get one hole centered.  Then a bearing allows the work to be rotated
          on center to align the other punch marks.

    - pgm/poly.py
        - Add -i option for interactive solution of polygons (see notes in script)

    - ca.py
        - In light of hc.py work, this could be a better calculator environment than hc
        - Allow documentation with vi
        - Use only mpf and mpc, int, fractions
        - Have a command that toggles between str() and repr() representations

    - /science/elements/periodic_table.py
        - Work on this so that it can be built with python 3 and the modern crappier tools
        - See if it can be repackaged to have a minimum dependence on special tools

    - dpstr.py
        - Finish usage examples

    - words.py
        - Using files in /words/words.*, return sets of words indexed by short names.
        - GetWords(name, ic=False) where ic means ignore case.
        - Dump __doc__ to get description of each list of words.
        - Include a bidict to get UK-American word spellings

    - wordparse.py
        - Tokenize a file and apply heuristics to get rid of things like '*italic*',
          '[GitHub](http://github.com)', etc.  This would for example be someone's markdown dialect.
          Then the remaining text can be evaluated for readability.  Also remove common
          abbreviations (Mr., Mrs.) and other stuff.
            - Some examples
                - *italic*, _italic_, **bold**, __bold__, `backticks`, ~strikethrough~
                - Lists, numbered lists
                - Links [GitHub](http://github.com)
                - Block quotes, comments

    - Readability
        - Once the NGSL stuff is built, it could be combined into about a 15k wordlist from the
          lemmatized stuff that would cover a lot of writing, as it's aimed at ESL applications and
          has something like 90%+ coverage of general, academic, and business writing.  This should
          be added as an option to pgm/readability.py.
        - This will need to be tuned with a number of the various words I use in general writing.
        - A weakness of FK type metrics is that they can be fooled by gobbledygook (e.g., shuffle
          the words in a sentence and they'll still remain the same).

    - Correlated random variables
        - A method for normal deviates is to generate uncorrelated samples, then multiply them by a
          matrix c such that c*c.T = r where r is the desired covariance matrix.  c can be created
          by using the Cholesky decomposition of r or from the eigenvalues and eigenvectors of r.
          https://scipy-cookbook.readthedocs.io/items/CorrelatedRandomSamples.html gives a suitable
          script showing how to do this.
        - It's more important to me to see this method work for variates from other supported
          distribution.  Explore how the method works with other distributions:  uniform, weibull,
          gamma, lognormal.
        - Even if it only works approximately, it would still be useful for Monte Carlo simulations.
        - If it works adequately, create a library to generate such things, using numpy and scipy.
        - Question:  if these tools don't work generally, is there another approach like using the
          desired correlation to generate one deviate, calculating where it is in the CDF, then
          using the correlation to get other CDF values for the other RV's CDFs?  This would be a
          heuristic, but who cares if it works?
            - Use cephes/cephes.dll
        - Using "how to generate correlated random variables" for a web search turns up some hits.
          Look at "more videos"
            - https://www.youtube.com/watch?v=pVgKwqN621s uses Latin hypercube sampling for
              correlated variables

    - sortindented
        - Sorts stuff like
            b 
                stuff
                stuff
            a
                stuff
                stuff

          to get
            a 
                stuff
                stuff
            b
                stuff
                stuff
        - Would be handy for organizing my help files

    - matplotlib
        - For show(), add in a keyboard trap of escape to exit

    - pgm/rbl.py
        - Remove blank lines in a file
        - Change multiple lines to 1:  -1
        - Delete lines with whitespace ^\s*$ :  -s
        - Default is to only remove ^$ matches
        - Combine with pgm/rm_multiple_lines.py
        - Almost always python code, so don't want to touch things inside multiline strings

    - hc.py
        - Needs to be finished off
        - Complete documentation
        - Move to /plib/hc
        - Finish unit tests

    - Practical uncertainty and accuracy
        - Elementary exposition
        - References wikipedia uncertainty propagation page
            - Discusses X ± Y and X*Y
            - Then shows same calculation with uncertainties library
        - Uncertainties library
            - Mention facility with numpy & correlation
            - Demonstrate a use of a mfg spec for a DMM to calculate a measurement uncertainty
        - Interval arithmetic
            - Show the same computation with interval numbers
            - List the function support of mpmath
        - Differentials
        - Focus on interactive python sessions
            - Show how to use pip to install mpmath & uncertainties

    - 870.py
        - Given a reading by the Aneng 870, print out the accuracy statement in a variety of forms
            - x.xxx[y], x.xxx(y), etc.
            - -k option sets k factor to estimate std uncertainty from accuracy interval.  Defaults
              to 2.

    - lib:  fmt
        - Minimal python function to get string interpolation to n digits
        - Handle floats & integers
        - Put in lib as paste-in code

    - par.py
        - Parallel resistors solver
        - Arguments are R1 R2 ... Rresult  Substitute x for what you want.
        - Expressions are allowed for each resistor
        - Can use SI prefixes but not in expressions:  they will be expanded to the proper form
            - Consider using tokenizer for expressions so that SI prefixes can be used
        - -s str lets you define a variable for a shorthand use in an expression.  Example:  str =
          'R7 = 44.7 - 3.2' and it will be evaluated by exec(str, globals, locals)

    - pgm/zener.py
        - Given a desired voltage, show how to get as near as possible to this with on-hand zeners
          and other diode types.
        - Note things are very current-dependent, so final experimentation needs to be done with
          various current levels

    - pgm/diode.py
        - Used to predict electrical parameters of various diodes
        - Given V, print i and R
        - Given i, print V and R
        - Given R, print i and V
        - 1N4001 types, 1N4148, LEDs, Schottky

    - meter.py
        - Library to generate analog meter scales

    - isotopes.py
        - Create an on-disk database of isotope data.  These can be made with requests.py and the
          wikipedia isotopes tables.
        - Provide searches
            - Half life
            - Decay mode
            - Decay energy
            - Metastable states

    - cmddecode.py
        - Some commands are special.  Thus, in hc.py, clstk is to clear the stack.  Suppose it's
          only confounded with clx.  Then cls means to clear the stack.  But because I type cls a
          lot, I might accidentally type cls when I meant clx.  Thus, clstk needs to be at least
          clst.

    - pgm/mixture.py
        - This works well now as a volume-based script
        - Consider removing the interaction prompting portion, as I prefer the datafile-driven
          approach since it allows faster problem solving.
        - Add a mass-based option which lets you calculate in mass per unit volume.  A variable
          'basis' in the datafile will be either 'mass' or 'volume' (defaults to volume).

    - pgm/chklnk.py
        - For each file on the command line, extract the http:// links and check if they are broken.
          For OO files, it's a zip file and you just read each XML file.

    - pgm/c++_units.py
        - Update to python 3
        - Find docs & put on HU

    - ~/bin/math
        - Runs a python script that finds all functions in math/cmath and figures out the return
          values of each call.

    - H utility
        - Rename to j, as lowercase is easier
        - Use goto.py functionality, modify if needed
        - Simplify to using order found in config file with commented lines ignored
        - Commands in H:
            - e       Edit the config file
            - g [n]   Change to directory in line n (defaults to 0)
            - a d     Push the indicated directory d onto the stack
            - p d     Push the indicated directory d onto the stack
            - l       Show the contents of the config file

    - f.py
        - Use fmt.py for interpolation
        - Get rid of N attribute, as I always forget it:  go back to n.  Then make n become m, which
          changes only the instance's number of digits.
        - Using the recent work on 'Classes derived from flt for physical data, see if it's possible
          to have one numerical object derived from flt that allows the storage of a numerical
          value, unit, and covers the special cases like Nothing, Unk, Approx, Rng, LessThan,
          GreaterThan, and Unc.  For unc, use the uncertainties library and always display in short
          form.
            - This would be kept up-to-date and be able to modularize the use of data tables from
              e.g. wikipedia.  The fundamental goals would be to provide string interpolations that
              are meaningful and allow numerical computation.
            - Using types derived from flt is useful and makes code simpler.  How would a single
              type provide the same feature?  One way would be an enum.
        - Unlike the /pylib/pnumber.py library attempt, the goal is not computation with these
          physical numbers, rather the string interpolation and scaling of the table numbers.  You
          can e.g.  change the units by the attribute u, as long as the dimensions are consistent.
        - Since these numbers are just floats, they can be used in math library calls.  No
          dimensional checking is done to ensure that arguments are dimensionless.  It's possible
          the math library stuff can be modified to do this by default, by e.g. checking the units
          attribute to be None or the empty string.

    - Name tags
        - Make a PDF with name/phone that can be printed on a durable plastic sheet, cut out, and
          have a hole punched to make a label for e.g. putting on a keyring or tying to something to
          identify it.  Draw borders around them so they can be cut off.  Have the printer shear
          them off into strips (remainder can be cut with scissors when needed).  Do for me, Glenda,
          Sally, Seth, Jimmy, Leslie.

    - Voltage divider with matched resistors
        - The Fluke differential KV divider gives 12 100k, 11 20k, and 11 4k resistors.  These will
          be likely matched to 0.01% levels.  Write a script that uses the uncertainties library
          along with all the combinations that can be used to make a voltage divider with a ratio of
          < 1.  Print out: input Z, ratio, uncertainty.
        - The more general problem is to make dividers with sets of resistors that are nominally the
          same.  You'd use their value as measured and the uncertainty would be from the
          measurement.
        - If you search the web, you come across people who have studied the numbers of
          series-parallel graphs and there's a link to a OEIS sequence for the combinatorial
          problem.  If each of the N resistors was different then the number of circuits would be N!
          times the OEIS numbers.
        - https://oeis.org/A000084
            - Gives a ref to Knuth vol 1
        - https://math.stackexchange.com/questions/2345783/given-n-identical-resistors-find-the-total-number-of-series-parallel-combinatio#2864105
        - http://oeis.org/A000084/a000084_2.pdf

Inactive

    - pgm/pur.py    Keep track of purchases
        - Example:  when did I last buy a set of 357 batteries?
        - Data (variable names for specifying search; defaults to nm)
            - nm = name
            - pn = part number
            - n  = quantity
            - v  = vendor
            - ord = date ordered
            - del = date delivered
            - num = receipt number, transaction number, etc.
            - cat = category
        - Search for regex is default behavior

    - pgm/uni.py    Search for letters similar to a Latin letter
        - un "LETTER M" |grep '\<M\>' yields a list of things that look like the basic ASCII letter
          m.
        - Also combine this with the mappings in asciify.py.

    - pgm/readability.py
        - Add an option to let you see the histograms of the readability elements: word length,
          syllables, words per sentences.
        - Add -w to print out a list of the unique words in the file.  -W does the same but
          maintains case.

    - DMM accuracy tool:  Estimate uncertainty of a DMM's measurements
        - Look at Siglent_SDM3055_5digit_DMM_datasheet.pdf for an example of the table specs on page
          4
        - Inputs 
            - reading
            - function, range, freq, T, crest factor
        - Output will be reading with short-form uncertainty "a(b) unit".  Options let you choose
          regular "a±b unit" form or "a[x%] unit" form.
        - Functions:  dcv, acv, dca, aca, ohm
        - Usage will be an interactive form.  Once you've specified the input stuff, you're prompted
          for a reading and you get the stated result with uncertainty

    - /math/hcpy/integer.py
        - Move to /plib/zn.py.
        - Zn class to give you n-bit signed & unsigned integers.

    - Find a decent thesaurus

    - gawk & mawk
        - HU could use an article on this while I'm relearning awk for the family history project.
        - gawk in particular has a number of powerful features over and above the classic awk.  The
          debugger is particularly helpful.
        - Speed on my machine is 16 times faster than a C program that processes things by bytes
          (admittedly inefficent, but simple to write a state machine).
        - p 142 of the AWK book gives an RPN calculator example.  

    - Death:
        - Plan for my death
        - Disposition of any property
        - Send email to certain friends
        - Identifying scars/characteristics 

    - Time calculations
        - I like the time calculation feature in hc.  Often, I'd like to be able to do something
          like enter a data 7Nov2022 and subtract off 12 years.  It would be nice to have a
          specialized script to do this.  Or add to hc the ability to include the time unit with the
          number.

    - /plib/pgm/cu_wire.py
        - Add -l option that lets you specify a length (defaults to m) and the script prints out the
          resistance of this length of wire.

    - tp.awk
        - Conditionals
            - '.on x' and '.on !x' use env var x
            - '.if x', '.else', '.endif'

    - Chemical names
        - https://someonesdad1.github.io/hobbyutil/science/chemical_names.pdf
        - Might make sense to convert to LaTeX
        - Could be useful to have a script to look things up and position at the right PDF page.

    - matrix.py
        - The important function replace() doesn't work right.
        - In applications, replacing rows/columns is particularly important, so make sure the needed
          functionality is there.
        - Syntactic sugar
            - Style 1
                - m.col(i) returns column i as a column vector
                - m.col(i, cv) puts the vector cv into column i
                - m.row(r, x) would do the same for rows
                - Move existing col(*n) to columns(*n) and row(*n) to rows(*n)
            - Style 2
                - m.col[i] returns column i as a column vector
                - m.col[i] = cv puts the vector cv into column i
                - I suspect this syntax isn't possible
        - Testing:  now that numpy is available again, use its matrix features in the self tests.

    - /plib/dev/units
        - Utility to parse GNU units data file
        - Could be useful to use to define a set of units for u.py

    - pcs.py (runs pycodestyle to check scripts)
        - The /plib tree is done for priority 2 and 3 errors.
        - Do for:  /math, /science, /elec, /shop

    - trigger.py
        - Change default trigger strings to '# ∞' and '∞ #', as this will stop error messages from
          pycodestyle.  This also has the benefit of making the string a little easier to read.  
        - Write a script to modify all the files in the current directory and identify all the
          trigger strings first.

    - numpy
        - Now that I have working numpy/scipy installations, run the MLR code on the NIST test cases
          to see how badly they perform.

    - pgm/ds.py
        - Needs to have a mechanism to ignore a set of files or directories in the project root
          directory.  This is amply illustrated by installing the HTML files for scipy, which now
          gives a list of nearly 5000 files when you search for scipy.
            - Model this on .gitignore 

    - /pylib/xfmpy needs to port to /plib

    - numpy/scipy/matplotlib app
        - Write a script that proves that these three tools are installed and running correctly.
        - Running /plib/pgm/thermal_emf.py is one good test
        - I'd like to see an example that compares the thermocouple polynomials to a linear
          interpolation using scipy for all the tabulated TC data.  These would be scatter plots of
          the reference tables to the polynomial predictors.
        - On the Mac, using miniconda was a dream to install these apps.  This is now my preferred
          method, but alas it won't interoperate with cygwin.  This is a fundamental driver to
          update Windows to 11 and switch to WSL2.

    - Class attribute printer mixin
        - I need a tool that will display the attributes of a class instance.  The majority of the
          time you want it to display "normal" attributes like self.variable and have it ignore the
          ones like self.__str__.
        - You'd register a class type with it and it would have methods to include and exclude the
          things you want to see.  Then at a breakpoint you'd do something like qq(myvar) and it
          would produce a pretty-printed dump of the attributes.

    - Shamrock survey
        - Triangulation
            - Probably the best method of surveying would be to use the laser distance meter.  Find
              a good target and mount the meter on a tripod.  My older meter needs to work in lower
              light conditions to get decent distances (a few tens of m), but this isn't a hardship
              as long as a triangulation grid is constructed.
        - Benchmarks
            - bma = Primary = in center of Edna/Shamrock intersection
            - Secondary
                - bmb0 = center of well
                - bmb1 = Entrance to driveway on Edna
                    - Need photo of spot on concrete
                - bmb2 = Southernmost metal gate pole on west side
                - bmb3 = Farthest east wooden fence post on south side
                - bmb4 = Street sign near bmb3
                - bmb5 = Farthest northwest wooden fence post
                - bmb6 = Street sign next to bmb5
                - bmb7 = Southeasternmost corner of fence gate cement pad
            - Tertiary
                - bmt1 = SW corner of gray building foundation
                - bmt2 = NW corner of cement slab
                - bmt3 = NW corner of patio
                - Corners of house foundation
        - Layout of lawn
        - Location of sprinklers
        - Building location
        - Use sighting compass to take magnetic bearings of things.
            - Calibrate compass by dropping a vertical from the north star
            - As of 2022, Polaris' mean declination is 89.35 degrees, so calibration of the compass
              will be better than 1 degree
            - This will be done with two strings on plumb bobs, one adjustable.  Then the next day
              the compass will be sighted along the two strings and adjusted to read true north.
              Then it will be calibrated for the current magnetic declination.
        - This will be worth a reference document explaining techniques.  The resulting python
          script could be turned into a library module based on g.py that allows people to plot
          their own surveys.  Some key graphic components would be
            - Benchmarks, primary and secondary
            - Buildings
            - Cement pads
            - Plants, fence posts, sprinklers
            - Layers could be used for different features.  For example, the electrical layer would
              show known cables.  The sprinkler layer would show valves, sprinklers, pump, wires.
              Etc.
        - This survey would get archived on github so it can't be lost

    - Text processor
        - I find I do a lot of text processing.  Tools like gawk/mawk are almost adequate; they have
          power and are very efficient.  But they have archaic 40-year old semantics.  I've never
          liked the design of m4 though it is powerful.  The following would be features I would
          want:
        - Easy to comment out large blocks of text
            - Even better if this can be done conditionally on environment variables or programming
              variables
        - Allow conditional constructs of if/else and allow them to be arbitrarily nested
        - ts.py and tp.awk use control lines of '^\.x' form.  Relax this to allow them to have
          arbitrary leading whitespace.
        - Need to define text replacements that are either plain text or regexps
        - Need numerical evaluations, both integer and floating point
        - Use standard function notation like f(*p, **kw)
        - Namespaces or control over scope
        - Needs to be both byte-oriented and able to handle UTF8
        - Supports iteration
        - My feeling is that this needs a careful design, then should be implemented in C/C++ or
          modern tools like Go or Rust.  
            - However, I might be able to adapt e.g. ts.py, especially if I use texttable.py for
              formatting text in tables.
        - There are two fundamental design choices:  line-oriented or token-oriented.  
            - Token-oriented could be acceptable, but whitespace would have to be conserved to be
              useful for text processing.  
            - A token oriented design is desirable from a flexibility standpoint and a standard
              functional form like ∞funcname(*p, **kw) could be used where ∞ is a special trigger
              character to alert to a control sequence.
            - Token problems
                - When you want to e.g. format lines of text, such as dedenting or indenting.
                - How do you handle line-oriented regexps (which get used a lot)?
        - Another idea would be to write in C/C++ and use an embedded python interpreter.
        - Though C requires painful manual memory management, most text files do not have overly
          huge input lines.  A large line buffer on a modern machine could be 100k to 1M and be able
          to handle any typical text file I'd throw at it.  

    - python code spell checker
        - This would use the parser to find strings and spell check the strings in a script.

    - manning.py
        - Consider fixing /science/pipe_flow/manning.py and moving it to /plib/pgm
        - Make it an interactive form

    - WaveXpress
        - Try to port to python 3
        - Keep track of time
        - Two strategies
            - Convert to late python 3 version
                - Severe problem:  no dialog tool
            - Convert to C++ (wxWidgets)
                - Has dialog tool
                - Probably no dependencies
                - A quick study showed wxPython and wxWidget calls have the same name, so most of
                  the work will be in 1) updating 10 year old stuff and 2) converting to C++ data
                  structures.

    - Current python libraries that might be worth looking at
        - reportlab module 3.6.3 in python 3.9.10
            - This is a PDF module that looks like it builds on the PS language
            - Intro at https://pythonassets.com/posts/create-pdf-documents-in-python-with-reportlab/
            - Docs https://docs.reportlab.com/
                - https://docs.reportlab.com/reportlab/userguide/ch2_graphics/
            - I was going to delete this, but it's a python library for producing PDF files.  It
              might make sense to use it as a back end for the g library.
            - It uses Pillow to insert images.
            - Handy grid() function to make grids.
        - prompt_toolkit
            - Can replace readline
            - https://pypi.org/project/prompt-toolkit/
        - Running parallel python installations
            - Opinion:  start with virtualenv, as it may be adequate.  However, pyenv resonates with
              me as a UNIX user because it doesn't depend on python.
            - virtualenv
                - https://virtualenv.pypa.io/en/latest/
                - Primary use case is to let a project have a python set of modules customized for
                  that project.  Pretty lightweight and easy to use.
            - pyenv
                - https://github.com/pyenv/pyenv
                - Primary use case is to manage multiple installations of python.
                - pyenv is a tool to install various python versions and switch to them, using the
                  PATH shim method like virtualenv.  
                - https://learnpython.com/blog/change-python-versions/ is an intro
                - A key is to see if pyenv and virtualenv are independent and compatible.
                - If this works, then I'd like to have 3.7, 3.9, and the latest 3.10 on my system.

    - Physical problems
        - Use python scripts to solve elementary physical problems.
        - Example:  Newton's law of cooling
            - dQ/dt = h*A*ΔT where Q is the energy leaving the body per unit time (power) in W, h is
              the average heat transfer coefficient in W/(m2*K), A is the surface area in m2, and
              ΔT = (T(t) - Tenvironment) in K.

    - Ghostview is here:
      https://www.itl.nist.gov/div898/software/dataplot/ftp/win_vista/homepage.htm
        - This may be the long-lost version I liked.
        - It also needs Ghostscript, also on that page.
        - Unfortunately, the Ghostscript install is 64 bit, but Ghostview looks for a 32 bit DLL.
          Also, it requires registration to eliminate an annoying nag screen.
            - Maybe the binary can be hacked to change the DLL name, but it will probably crash.
            - Next option is to look for a 32 bit Ghostscript.

    - prob.py
        - Add classes for statistical tests:  confidence intervals for means & standard deviations,
          comparisons, and ANOVA significance.

    - format_numbers.py and fraction.py
        - Move to fmt.py
        - Note the formatting features of /math/hcpy/mpformat.py include commas and 5 spaces for
          decimals.  These things could be added to the fmt.py module.

    - transpose.py
        - This may be the basis of a text table tool along with wrap.py below to get things wrapped
          to a specific width.
        - Add --test option and make it a command line tool for text files.
        - Default splitting of lines for fields is str.split()
        - Need to handle cases like table in pl program's output where one row spans multiple
          columns.
        - Options
            - -c specifies the starting string
            - --csv Parse as a CSV file
            - -s Specify string to split on
            - -r Specify regexp to split on

    - decimalmath.py
        - Add a complex Decimal number and modify the elementary functions to take either real or
          complex arguments.  The tests should duplicate the math/cmath functions' behaviors to e.g.
          15 figures.  This would complement f.py; maybe it should be called d.py; maybe it should
          be part of f.py:  dflt, dcpx.
        - The vision would be to let you do math calculations and use the elementary functions that
          would work on flt, cpx, dflt, dcpx without breaking.

    - Decimal equivalents
        - I use the /shop/cheat_sheets/pdf/decimal_equivalents.pdf pages so much in the shop that
          this should be something made with the g library that could be taken to a printer and
          printed in color on some heavy plastic.  I'd want at least two of these, one for over the
          toolboxes and one for over the lathe; and maybe one for my office.

    - wrap.py
        - A very common need is to dedent help text.  Add a function printwrap(*s) that takes each
          string s, removes leading and trailing whitespace, dedents the text, and prints it wrapped
          to 1 minus the current number of columns.  Embedded control lines can be things like
          '.on', '.off', '.indent = n', etc.  The overall state is remembered until '.reset' is seen
          or the keyword reset is True.  'paragraph_sep' keyword defaults to '\n\n'.

    - gg
        - Project to look at rewriting the g library to output in SVG
        - Benefits
            - Most browsers support SVG
            - SVG is more powerful than PS
        - I'd like to see if the original could be refactored to use a back end for rendering in
          either PS or SVG.  If this is done, then it would probably be possible to render in PNG
          too.  It also shouldn't be hard to render to PDF too.

    - VCS
        - It might be handy to keep 64-bit versions of Mercurial, Bazaar, and fossil under the
          64-bit system.  This would be useful for occasional testing/learning and keeping a hand in
          on other VCS systems.

    - xyz.py
        - Update to use flt
        - Change printout to use Unicode symbols
        - Use color for coordinate systems

    - Sequence value comparisons
        - An arbitrary sequence can be a sequence of sequences.  Since [1, [2]] != (1, [2]) because
          one is a tuple and one is a list, it would be nice to have a recursive function that would
          convert all the sequences to lists so that the comparison would be a true
          element-by-element comparison.  A deeply nested sequence of 1000 calls results in an
          exception, but this would be an unusual sequence.  Use sys.getrecursionlimit() and
          sys.setrecursionlimit() to set things as you wish.
        - A similar function would let you determine the nesting depth of a sequence.

    - regression.py
        - Need to write a regression.py module that doesn't need numpy or scipy.  Base it on the
          stuff in /pylib/regression.py and test it with the NIST corner cases.  Input variables
          should be Decimal objects.

    - bd.py
        - Replace the C program, as python is fast enough
        - Colorize output
        - Allow binary or text comparisons
        - Try to use a heuristic to determine if text or binary

    - ts.py
        - Import to /plib

    - help
        - Develop, then add to /plib
        - Add /tools to /plib
        - Move everything to one directory for ease of editing

    - pgm/j.py
        - Allows you to calculate a maximum current for a wire.  Base things on the current
          densities in the Chassis data, which probably came from MIL-STD-5088, which derived its
          numbers experimentally in the 1960's.
        - Now that I have a transformer capable of hundreds of RMS A, I can finally do experiments
          at room temperature that quantify the allowed temperature rise of various wires as a
          function of current density.
            - This could be done with solid copper conductors with no insulation.  
                - Ratings for various insulations could be calculated by the thermal properties and
                  allowed maximum temperature.
            - Measuring the actual current will be a bit of a task.  My primary tools will be the
              Aneng clamp on ammeter and the two Weston analog ammeters I have.
            - The wire temperature can be estimated from a small TC welded to the wire's surface.
            - Need to explore the difference between DC measurements and 60 Hz measurements.  This
              should be done by comparing a 30 A measurement from the 6033A supply to a 30 A RMS
              measurement.

    - EDN PDF files
        - Looks too difficult to index with script
        - Would be nice to have an index though
            - Title, author, page, document

    - pgm/ddiff.py
        - Use color.py
        - Use filecmp module for efficient comparisons

    - Static attribute access
        - A common problem when writing some classes is that all attribute access generates code and
          recursion is inevitable and causes code failure.  inspect.getattr_static() may be able to
          short circuit this behavior and e.g. let you get to self._my_private_value without calling
          getattr().  The stated purpose is to retrieve attributes without triggering dynamic
          lookup.

    - /pylib/pgm/xyz.py
        - This is a significant enough script that it should be tested and moved into /plib/pgm if
          it warrants.  Then add back to hu.

    - linkcheck.py
        - Utility to search a file for http links and see if they are still accessible.


    - /tools
        - https://github.com/vonj/snippets.org is a copy of what I had
        - It could be useful to use the will & won't compile lists (see my notes file) to create a
          subset of the Snippets stuff that will compile with a reasonably modern gcc.  This could
          be archived on github.

    - columnize.py
        - Write a Decolumnize() function that can take the columnized output like '0what.py -m *.py'
          produces in /plib/pgm and converts it to a list of lines with one object per line.  For
          files it can't figure out, add an option to show the columns where breaks should be made:
          -c "8,14,22,35" and use -1 for 1-based numbering.
        - Also, do a 'ddiff -r /pylib /plib'.  You'll get an exception because a string is too long
          to fit to the screen.  In this case, you'd still want things printed, so maybe a too_long
          kw is needed to ignore such things.  Also has error message bug leaving green text on
          screen.

    - ppp.py
        - Pretty printing module that would focus on pretty printing top-level contents.  pprint is
          annoying because when e.g.  printing a list of strings, it will print only one string per
          line (you have to give it the compact keyword to fix this).  The contents should be
          printed in compact columns using Columnize.  
        - Color should be used for type hints
            - list:  grn
            - tuple:  red
            - dict:  yel
            - defaultdict:  orn
            - deque:  mag
            - set:  vio
            - str:  cyn

    - 0naming.py
        - This would check all plib modules to make sure there was no file in /usr/lib/python3.7
          with the same name.
        - Another need would be to look for circular imports, which are mightily annoying.
            - https://stackoverflow.com/questions/3739654/how-to-fix-a-circular-dependency-for-imports

    - lookup.py
        - Not the same as /plib/pgm/lookup.py.
        - This would be a module in /plib that allows you to look up words programmatically.  
        - My choice for a default wordlist would be words.x.beale.2of12inf which contains the
          plurals, past tense, etc. of the words in words.beale.2of12.  But wordnet has a good list
          of words too.
        - There are times when you want all words to be lower case and times you want to find proper
          nouns.  Both use cases need to be supported.
        - There should be a way to find exact matches and close matches.
          https://www.datacamp.com/community/tutorials/fuzzy-string-python
        - I'd like to NOT put the wordlists in the /plib tree because of space.
        - Once the location of the wordlists 
        - The lookup function would have a keyword to select which wordlist to search.
        - The docstring would be pretty detailed about how to do things.

    -lz.py
        - I use my lz alias quite a bit ('ls -hlSr').  It would be nice to have a python version of
          this that would color code the files information by size.  Same goes for ll.  The file
          names could still be colored as per ls, but the other information should be shown in a
          color that gives a hint to the size.  The exa tool does this, but it's not available on
          Windows.
            - < 10k         plain
            - 10k to 1M     grn
            - 1M to 10M     cyn
            - 10M to 100M   lmag
            - 100M to 1 G   lyel
            - > 1G          lred

    - Color cube plotting in g
        - Write an RGB color cube plotting function:  x = grn, y = blue, z = red.  -s makes it
          stereoscopic.  -x, -y, -z give views down the different axes (-z is default).

    - Writing
        - I have an adequate spell checker.  It could be useful to develop experience over time of
          things that needed to be looked for grammatically.  Example:  I often misuse "it's" and
          "its" because I'm so used to typing the contraction.  Other things like "bear" versus
          "bare", their/they're/there, etc. are common mistakes.  A script could find such things in
          text and print out 3 lines before and after so you could check things in context.  Print
          the target word in color for easy reading.
        - Of course, the first thing to do is to check the web, as certainly someone has already
          written a similar tool.  They have, but most require a java library and I don't want to
          download it.
        - This could be a tool called write that would read stdin unless it's given a file; it would
          write its recommendations to stdout.  For ease of use, use a script that pipes the output
          to less so that color highlighting can be seen.  Optionally decorate with the rule if an
          option is given.

    - Outliner with vim
        - https://github.com/vimoutliner/vimoutliner could already be this tool, at least close
          enough
        - Vim's folding is good, but would it be possible to build an outlining tool with it that
          does most of what I want?
        - An advantage is that :gqap formats the current paragraph, which I use constantly
        - Could an external C program do the formatting of things?  The leader for a bullet item
          could be e.g. a non-breaking space, then changed to other values as needed for visibility.
        - It could provide a variety of numbering methods

    - get_import.py
        - Scans all python files to find import lines to make an index file.  Then you can see a
          report of all files that use a particular import.  The line number will be saved and an
          interactive mode lets you launch the editor to see a particular symbol.

    - Formatter
        - I don't think black is worth keeping.  Spend some time with yapf to see if it can be tuned
          to what I like.

    - Room heating energy
        - Write a script that estimates the electrical energy and time needed to heat up a room in
          our house.  Focus on the shop and garage.  The primary input number will be the starting
          temperature in °F.  An option can change the final temperature, which defaults to 70 °F. 

    - Common keypresses
        - Two of the most common keypresses are ctrl-C and ctrl-V.  These should be assigned to a
          single easy to access keypress.

    - Remembering a structure
        - A problem when coding is that a data structure is developed and you start using it in your
          code.  Then you always have to stop and look around the code to figure out the structures
          again.  Is there a way to add a utility that documents the structures so e.g.  a command
          line option will print out a succinct summary by the code examining itself?  Ideally, this
          would be just a few lines of code that are easy to remove when done (or, better, leave it
          in for later maintenance).
        - One possibility would be to derive all classes from a base class that would know how to
          introspect itself.

    - dpmath.py
        - This would be a general-purpose module for math calculations.
        - Types
            - flt:  derived from float
            - dec:  derived from Decimal
            - cpx:  derived from complex
            - dpx:  two Decimal instances giving a complex number
        - Math
            - All math/cmath functions in scope
            - Work for all types
            - Special function support if mpmath is available
        - Try to put essential details in a Base class
        - Key features
            - String interpolation only shows a given number of significant figures
            - The instances are context managers, allowing code like
                - with x:
                    - x.n += 3
                    - print(x)
                - to let you change the number of digits as needed.  Or, define a __call__(self,
                  n=None) to do this without needing a lock.
            - Infection model
                - Need a strict attribute in Base.  If True, interoperation with Fractions or floats
                  for dec or dpx is not allowed because of the chance of losing information or
                  adding noise.
            - Units:  It would be great to make these a mixin, but this is going to be hard.
            - REPL:  if this can be gotten to work, then the repl I wrote will be a nice command
              line tool suitable for routine calculations.
        - Need to coalesce f.py, dpdecimal.py, and decimalmath.py.

    - depend.py
        - Should be able to examine a file and list the dependencies on scripts.  Look at pgm/dep.py
          and the modulefinder module.  Then what.py should only print out the non-standard modules.

    - wrap.py:  
        - This module sucks.  It needs to be rewritten so that it just works as you'd naturally
          expect it to.
            - Should be able to give an indent and right margin
        - Look at syntax from ts.py (/pylib/pgm/ts/ts.py).  I seem to have designed it as a module,
          so it might be the tool of choice.
        - This really needs to be a simple text formatting language.  In particular, it could be
          simply a Wrap object with a __call__ method that gives you the functionality desired with
          keyword arguments.
            - A dedent keyword would remove common whitespace from lines if True; otherwise, it
              would be an int that tells how many spaces to remove from each line.
            - The common use case would be for Usage/manpage stuff in python scripts, so tune syntax
              to this case.
            - f-strings are used most frequently, but also need to handle case with older
              '{}'.format(**locals()) type stuff.
            - Need simple syntax for common tasks.  Maybe leading '.' is all that's needed within a
              text string. '.^' to center, '.>' to right-justify, '.' to leave untouched, etc.  
        - Add a Block object that is like wrap, but justifies both the right and left margins.
        - Add a fold function that folds a string into a width, breaking where necessary.
        - For wrap(), it would be nice to have a simple syntax for lines that should be left
          verbatim.  Maybe a leading '.' would do it.  This lets you e.g. have header lines in a
          manpage like 
            - .This is a section title
            - .-----------------------
            - and they get left alone.
        - print(dedent(f''' This ''')) chops off the 'T'.

    - f.py
        - Add __call__(n) which returns str() but with the .n attribute temporarily changed to n.
          This would be a handy shortcut, as the majority of the time str() is needed and it avoids
          using a with statement.
        - Another use case is variable scientific data.  For example, in /plib/rgb/chromaticity, the
          nimeroff.pdf paper in table 3 has data given from 6 to 2 significant figures.  It would be
          handy when dealing with such data if the constructor could be given a keyword option to
          figure out how many significant figures are present from the constructor's string and to
          save that number.  Then you have a choice of normal str() behavior or set the .ssf
          attribute to always show the number to its input number of significant figures.
          Arithmetic results would follow the conventions of significance arithmetic.
        - /plib/pgm/divider.py is a good example of poorer performance of the f.py module.  With
          sig.py, it took 0.4 s.  Using flt objects instead the overall time for a script increased
          to 4.4 s.  I changed it back to use sig.py.
        - Should color.c() be used in f.py?
        - Sometimes you want to perform calculations regardless of units.  This case could be
          handled with a property called iu that means ignore the units.  Then the self.val float
          would be used in calculations.  You'd only want to use this in a with block.
        - Allow init from "3in" or "3 in".
        - Must allow some functions to have arguments with units.  Example: take the square root of
          an area.  Each of the functions' behaviors need to be thought out for both real and
          complex arguments.  The Dim class may then need to specifically allow rational exponents.
            - math
                - Must be dimensionless:  acos, acosh, asin, asinh, atan, atanh, exp, expm1, log,
                  log1p, log2, log10, degrees, radians, erf, erfc, gamma, lgamma
                - Could handle units, but return value disallows:  ceil, floor, gcd, trunc
                - Probably OK with units:  atan2, copysign, fabs, fmod (args must have same units),
                  frexp, fsum, isclose, isfinite, isinf, isnan, modf, remainder, pow (first
                  argument), sqrt, hypot
            - cmath
                - Must be dimensionless:  exp, log, log10, acos, asin, atan, cos, sin, tan, acosh,
                  asinh, atanh, cosh, sinh, tanh
                - Probably OK with units:  phase, polar, rect, sqrt, isfinite, isinf, isnan, isclose
            - The general test should be that the function's answer should be "obvious".  Thus, for
              exp(), I wouldn't be able to decide whether the value used should be the SI value or
              the .val attribute, meaning exp() cannot take a flt/cpx with units.  However, atan2 is
              OK if the two arguments are dimensionally consistent because it's their ratio that is
              used in the function.  Thus, the function is allowed with units if you get the same
              answer using either "interpretation" of the number.  For some functions like isclose,
              you need the two arguments to be dimensionally consistent and use the same
              interpretation.
        - Test_sigcomp() fails.
        - flt:  add the engsi feature that will print a prefix with a unit.  If it's a multiple
          unit, surround it in (...).
        - f.py:  see line 150 in test/lwtest_test.py.  
        
            b = cpx(1+1j)
            b.promote = 0
            a = cpx(1+1j, units="m")
            Then in debugger, both a==b and a!=b are False

    - u.py
        - The u.py script should handle pressure units like inh2o or inH2O because they are used
          fairly often.  It will need some special handling because the strings contain digits.

    - geom_prim.py
        - Update properties to modern syntax, utilize matrix.py for determinants, as this would
          remove dependency on numpy.

    - module_dependencies.py
        - Is it necessary?  It needs to be rewritten to accommodate /plib.  The tools and programs
          need to be moved in first.  

    - Disk cleanup 4 May 2022
        - Moved 30 GB of stuff or so from c:/ to d:/
        - C:  110 GB, 72 used, 39 free 65%
        - D:  223 GB, 129 used, 93 free 58%

    - sz.py
        - Add -s option to sort by size

    - power.py
        - In appliance table, print in color the numbers that come from actual measurements.
          Measure our actual appliances where possible.

    - ds.py
        - Normally, the output is sorted by filename.  Add a -d option that sorts by date, with most
          recent file last.
        - Store every command and provide a -l option to show the history.  This would be useful for
          remembering previous commands.

    - indent.py
        - Define a smaller set of styles.  The built-in styles of astyle can still be supported, but
          not explicitly on the command line.  
        - Here are some ideas for special styles:
            - compressed:  2 space indents, python style
            - production:  4 space indents, bsd style
        - Also get it to work as a filter so '!Gindent' works in vi.  This means the usage needs to
          be given with the -h option, so the examples need to be changed to -H.
            - This could instead be done when the script is invoked with the name 'ind', which would
              always default to my preferred method.

    - char.py
        - When a line (e.g. Lower) is complete with all the allowed characters, print <all> at the
          end to denote this state.  Also add -s option, which removes the space between characters,
          giving a more compact output.  For -c option, include summary stats.

    - british.py
        - Move to plib and give it a function that will take a sentence of text and replace all the
          British words with English words, maintaining capitalization and punctuation.  This will
          require another function to split a string into a list of words and punctuation
          characters.  It would be nice to also maintain the spaces between the words too.  

    - ts.py
        - 'ts.py -m' doesn't work.

    - /pylib/pgm/readability/indict.py
        - Looks like an interesting tool.  It should use a reasonable dictionary by default and
          print the tokens out in columns for each file.

    - Elements
        - The wikipedia pages has useful information on the elements.  It would be nice if this
          information is regular enough to allow scraping to get a database.

    - NAS
        - Current storage
            - Don's Windows PC
                - 120 GB c:/ at 80% (SSD)
                - 224 GB d:/ at 60% (SSD)
                - 465 GB e:/ at 65% (WD USB 2 drive)
                - TOTAL 0.8 TB
            - Mac
                - 0.5 TB SSD
            - Glenda's Windows PC
                - 229 GB c:/ at 30%
                - 100 GB d:/ at 30%
                - 116 GB e:/ at 40%
                - 348 GB f:/ at 35%
                - TOTAL 0.8 TB
            - Conclusion
                - Don needs 2 TB of backup
                - Glenda needs 1 TB, but could also use 2 TB (expansion)
        - Hardware 
            - 1 TB WD SSD is $135 from Newegg.  Also have 0.5 and 2 TB.
            - Spinning hard disks are 1/3rd to 1/4th the price of SSD
            - I'd like to see a NAS with two pairs of 2 TB disks.  These would be connected in RAID
              pairs.
            - Newegg:
              https://www.newegg.com/p/pl?d=hard+drive&N=50001306%208000%20600003300%20100167523
              Blue drives 2 TB for around $50 each (5400 rpm); need 3 each for a Z1 setup.  Thus our
              NAS box would have 6 drives.
        - NAS info
            - https://linuxhint.com/best-nas-software-linux/
                - Amahi
                    - You can install Fedora or Ubuntu and run Amahi from there.  It's open source.
                      The faq says they had problems with ubuntu.
                    - You can use ext4 fs on both the OS and the mounted drives.
                    - faq http://www.amahi.org/faqhttp://www.amahi.org/faq
                - Open Media Vault:  Debian-based NAS
                    - https://www.openmediavault.org/download.html
                    - Supports FTP, Samba, NFS, rsync
                    - Supports ext4
                    - Web interface
                - TrueNAS:  https://www.truenas.com/freenas/
                    - Requires signing up to download
                - Rockstor
                    - Cent OS Linux distribution
                    - Plug-in system
                    - Can use it as a cloud server
            - https://gers.from-ct.com/8-best-open-source-nas-operating-systems-for-linux
                - XigmaNAS:  non-user-friendly web interface
        - ZFS  File system advantageous for NAS systems
            - https://itsfoss.com/what-is-zfs/, https://en.wikipedia.org/wiki/ZFS,
              https://www.howtogeek.com/175159/an-introduction-to-the-z-file-system-zfs-for-linux/
                - The third link shows how to use ext4 for a root disk in ubuntu, then add a zsh
                  filesystem.
                - This third link gives an excellent example of using the features of zsh.
                    - It explains the RAID-Z setup and that a single disk drive can die; you just
                      replace it and the system will rebuild your data.  To lose all your
                      information, two disks have to die.
                - https://www.howtogeek.com/272220/how-to-install-and-use-zfs-on-ubuntu-and-why-youd-want-to/https://www.howtogeek.com/272220/how-to-install-and-use-zfs-on-ubuntu-and-why-youd-want-to/
                  tells how it's enabled in ubuntu (it's not installed and enabled by default, but
                  it's officially supported).
            - Note it's a 128 bit implementation which can manage 1e9 TB.
                - It used to be called zetabyte file system.
            - It combines a filesystem with a volume manager
            - Pooled storage:  add to a pooled drive by adding a new drive
            - Copy-on-write:  new info doesn't overwrite, it goes to a new block; once finished,
              metadata is updated.  Result:  if system crashes during write, old data is still there
              and there's no need to run fsck after a crash.
            - Snapshots:  allows recovering past versions of a file
            - Data checksums:  verified on read; if no match, then automatically tries to fix.
            - RAID-Z has its own implementation, a variation of RAID5.  RAID-Z1 needs two disks and
              a parity drive, Z2 needs 2 drives and 2 parity drives, Z3 needs 2 drives and 3 parity.
                - A downside is that RAID-Z can be expensive because of the needed drives to add
                  storage space
            - See https://wiki.archlinux.org/title/ZFS/Virtual_disks#Creating_and_Destroying_Zpools
              for some examples
            - If you want to use ZFS out of the box, install FreeBSD.
            - Linux:  https://zfsonlinux.org/
            - 2 TB 7200 rpm WD HDD $47
              https://www.newegg.com/blue-wd20ezbx-2tb/p/N82E16822234469?Description=hard%20drive&cm_re=hard_drive-_-22-234-469-_-Product
              Three of these provide a 2 GB RAID-Z1 drive.

    - Magnet game
        - This was an idea Wayne and I had in 2007 and we went so far as to build a mechanical
          prototype.  See /tools/magnet_game.  While this might be a mechanical toy that could sell,
          it would be complicated to make.  
        - It would be more interesting to simulate on a computer.  I found that a Runge-Kutta
          solution of the EOM seemed to work pretty well; a major conclusion was that the number of
          iterations per step needed didn't dramatically increase as the number of interacting
          dipoles increased.
        - This would be particularly fun in 3D with e.g. some virtual reality goggles.  Or see if
          the MacBook could render things fast enough for a stereo view.

    - Mac stuff
        - Will be $2k 14" Macbook Pro with 16 GB RAM and 0.5 TB SSD
          https://www.apple.com/shop/buy-mac/macbook-pro/14-inch
        - Good overview of getting started: https://mackeeper.com/blog/learn-how-to-use-mac/
        - Display
            - My Windows box runs at 3840x2160 resolution.  The monitor is a 24 inch Dell F2415Q
              monitor.  Wayne uses a 27 inch monitor.
            - Fonts
                - You can list all your monospaced fonts in the Font Book app by creating a smart
                  collection File > New Smart Collection and selecting the design style as
                  monospaced from the available drop down menus.
                - https://www.fontspace.com  Clear Sans nice for display, but not for programming
                  because you can't distinguish 0 and O
                - https://fontmeme.com/fonts/sansserif-fonts-collection/
                - https://www.fontsquirrel.com/fonts/list/popular:  there's an amazing number of
                  sans fonts compared to a few decades ago.  Clearly, people have realized that sans
                  fonts are what are best for computer displays.
                    - Open Sans, Raleway, Montserrat, Roboto, Lato, Quicksand, Oswald, Source Sans
                      Pro, League Gothic, PT Sans, Titillium, Poppins, Cooper Hewitt, Antonio, Fira
                      Sans, League Spartan, Red Hat, Sofia Pro
                    - Monospaced https://www.fontsquirrel.com/fonts/list/classification/monospaced
                      Lots of choices
                - Fixed:
                    - https://www.1001freefonts.com:  Oxygen Mono, Onuava, Space Mono, Liberation,
                      Amiko, 
                    - http://www.fontsaddict.com/font/category/basic-fixed-width
                    - https://www.levien.com/type/myfonts/inconsolata.html
                    - Bitstream Vers Sans Mono
                      https://www.fontsquirrel.com/fonts/Bitstream-Vera-Sans-Mono
        - Hardware
            - Could use a USB 3 hub, as there are always too many devices to plug in
        - Setup
            - https://www.howtogeek.com/449715/how-to-set-up-your-new-mac/
            - https://www.intego.com/new-mac-user-guide Annoying popups trying to sell you their
              products.  But there are numerous things to learn about such as dock and automator.
            - Note both Firefox and Chrome are available for the Mac.  It may make sense to install
              both.
            - https://www.intego.com/mac-security-blog/setting-up-a-new-mac-should-you-migrate-or-do-a-clean-installation/
            - vim:  Find the source and build it with the features I use a lot.
                - brew install vim will install the latest version.
            - Spotlight sounds useful, but has privacy concerns.  Read
              https://en.wikipedia.org/wiki/Spotlight_(software) at bottom of page to see how to
              disable the built-in sharing.
                - 15 Feb 2022:  actual use:  going into spotlight search and privacy window, the
                  text tells you that you can:
                    - Turn off Siri Suggestions sending your information to Apple by SysPref >
                      Spotlight and deselect Siri Suggestions.
                    - Turn off Safari Suggestions by Safari > Preferences > Search and deselecting
                      suggestions.
                    - Location:  SysPref>Secur&Priv>Privacy, select Location services.  Click the
                      lock, enter passwd, click Details next to SysServices, deselect Location-Based
                      Suggestions.
                    - Disable Siri:  SysPref>AppleID>iCloud and deselect Siri in the list of Apps on
                      this Mac using iCloud.
            - https://theunarchiver.com/ for archive support better than the default
            - https://freemacsoft.net/appcleaner/ to clean up after the apps you want deleted
            - https://transmissionbt.com/ as a free and good BitTorrent client
            - https://www.howtogeek.com/671085/how-to-switch-between-open-apps-and-windows-on-mac/
              to switch between apps like alt-tab in Windows
            - https://www.techrepublic.com/article/how-to-create-a-virtual-desktop-in-macos/ to
              create virtual desktops
                - ctrl-UpArrow gets virtual desktop manager.  ctrl-Arrow keys moves between
                  desktops.
            - https://www.howtogeek.com/720194/how-to-turn-on-tap-to-click-on-mac/
            - vim 
                - https://sourabhbajaj.com/mac-setup/Vim/README.html
                - https://www.javatpoint.com/how-to-install-vim-on-mac
            - go2shell https://apps.apple.com/us/app/go2shell/id445770608?mt=12 Put this into the
              finder toolbar, press the button and you have a shell window open for that directory.
            - xcode is the default IDE/environment for Apple device programming and requires a
              minimum of 8 GB of RAM and can take an hour or two to download.  It can be installed
              from a terminal with 'sudo xcode-select --install'.
            - Various software suggestions are made at
              https://codeforgeek.com/setting-up-mac-for-development-coding/ for a coding
              environment, but the website is horrible because you can't copy text.
            - Should take a look at zsh:
              https://www.howtogeek.com/362409/what-is-zsh-and-why-should-you-use-it-instead-of-bash/
            - Video editors https://fixthephoto.com/best-video-editing-software-for-mac.html
                - Deb says she uses iMovie, but people who want to go up from there use Final Cut
                  Pro (but it's a $300 tool).  
            - Photo editing
                - https://www.pcmag.com/picks/best-photo-editing-software-for-macs
                - Start with Apple Photos and see if it does the basics well.  Though I like PSP,
                  its UI is dated and painful.  Still, the tools I use the most are perspective
                  correction and cropping.
                - Corel Draw package is $240/year.  If I do a lot of such work, it might be worth it
                  (includes Paint Shop Pro).
            - Thunderbolt 4
                - https://www.hp.com/us-en/shop/tech-takes/usb-c-vs-thunderbolt is a good
                  discussion.
            - Printer:  HP4050 at 192.168.0.49, port number 9100
              https://mackeeper.com/blog/add-printer-to-mac/
            - MacKeeper might be worth looking at http://mackeeper.com.  Try it out for $11/month
              and if it looks worthwhile, either buy one month when needed or it's $72/year.
            - Rust:  The Mac should be a good platform to learn to use Rust.
              https://doc.rust-lang.org/book/ch01-01-installation.html
            - Chrome:  should install along with vimium.  This is a fast way of browsing; I'd
              forgotten how well it works.  It does have a problem with an open gmail tab, however.
            - Notes is supposed to be good.
              https://www.houstonchronicle.com/business/article/Apple-s-Notes-app-is-all-grown-up-16827809.php
              Note it can do OCR with the system's camera.
        - Multiple monitors
            - https://www.howtogeek.com/443460/how-to-use-multiple-monitors-on-your-mac/
            - A core question is what monitor I should use.  Since the interface from an adapter
              will have two HDMI connections, should I assume that any monitor with HDMI should
              work?
            - https://plugable.com/blogs/news/best-hub-and-docking-station-for-the-apple-m1-pro-macbook-pro-laptop
              https://plugable.com/blogs/news/tagged/thunderbolt%E2%84%A2-4
                - 60 W dock $164
                  https://www.amazon.com/Plugable-Display-DisplayPort-Ethernet-Vertical/dp/B08B6CZ29Q/ref=sr_1_3?crid=J3KY7EV7MMA5&keywords=plugable+TBT4-HUB3C&qid=1643042068&sprefix=plugable+tbt4-hub3c%2Caps%2C177&sr=8-3
                  Note its USB3
            - Cable management:
              https://ascrono.com/blogs/news/basic-tips-on-how-to-manage-cables-efficiently Note the
              device that holds the laptop vertically.  This could be something made from wood that
              hangs from under a table and gets out of the way.
        - Keyboard shortcuts
            - Remapping: https://www.powermax.com/how-to-remap-keys-on-your-mac/ You can remap both
              system keys and have the function keys remapped for individual applications.
            - Apple's list of mappings: https://support.apple.com/en-us/HT201236
            - Specific app shortcuts:
              https://support.apple.com/guide/mac-help/create-keyboard-shortcuts-for-apps-mchlp2271/mac
            - Use the Windows key for Cmd if you're using a PC keyboard and alt for the opt key.
            - Spotlight cmd-space
                - Press and hold cmd-space for Siri
            - Set up for the most commonly-used tasks.  One keypress to copy to clipboard, one
              keypress to paste, one keypress to paste and press the Enter key.
        - Mission control
            - Used to control desktops, minimize apps, etc.  
            - SysPref>MissionControl>Keyboard&Mouse Shortcuts for Mission control, desktop,
              dashboard, & application windows.
            - SysPref>Keyboard>TextReplacement to map shortcuts.  Example:  use @em and have it
              expand to your email adddress.  You can also make common abbreviations, such as obv
              being obviously, iirc being 'if I remember correctly', etc.
        - Power
            - https://9to5mac.com/2019/04/29/power-button-macbook/ 
            - The mac will power on when:
                - Open the lid
                - Connect to a power adapter while lid is open
                - Connect to a power adapter when lid is closed and it's connected to an external
                  display.
        - Package managers
            - brew 
            - MacPorts:  https://www.macports.org/install.php
        - Programming
            - gcc 11.2 current as of Apr 2021
            - Install gcc:  http://www.edparrish.net/common/macgpp.php 
                - Open a terminal:  cmd+space, type Terminal, return
                - In terminal type g++
                - You'll get an alert box that lets you install either Xcode or the command line
                  tools.  Click on Install.
                    - You can install Xcode later from the AppStore.
                - Verify g++ is installed.
                - Enable showing extensions
                    - Open Finder
                    - Select Preferences from menu
                    - In Advanced, click show all filename extensions
            - Xcode
                - Good basics:  https://www.youtube.com/watch?v=FzuDUnoNQo0
                - Install from AppStore
                - Version 13:  https://developer.apple.com/xcode/
                    - https://developer.apple.com/documentation/xcode
                    - Built-in support for git
                    - Works with github
                    - Code review comments inline
                    - IDE has vim editing modes
                    - Simulator:  prototype when a real device isn't available.  You can simulate
                      iOS, tvOS, or watch OS.
                    - Build universal binaries to run on both Apple Si and Intel
            - First project:  update WaveXpress
                - The GUI design tool I used was called wxDesigner and it is no longer available, as
                  the guy in Germany stopped supporting it.  For some strange reason, I no longer
                  have any record of it in my ~/install directory.
                    - There's a $90 tool called DialogBlocks that works for C++ code.  I'll purchase
                      this if I move forward with a C++ implementation, although it can be tried out
                      in demo mode to make sure it's what you want.
                - The first approach is to move forward to a late version of python 3 and wxPython.
                  I would expect it should be possible to get the plotting stuff working, but
                  talking to instruments won't be a priority.
                - If I can't get things working in python, then a C++ version using wxWidgets should
                  be attempted.  I suspect the wxPython bindings are thin and most of the python
                  code should be translatable into C++ code, assuming the interfaces haven't changed
                  much.  This will still be a lot of work because C++ is a PITA.
        - Rosetta
            - Used on Apple silicon to run Intel code
            - If you have a universal app with a plug in that doesn't work, you can select the app
              in the Finder, use File>GetInfo, and set the "Open using Rosetta" button to force it
              to use Rosetta.  This may make the plug in (or extension or add-on) start working.
              See https://support.apple.com/en-us/HT211861.
        - Get copy of Apple Human Interface Guidelines (referenced at acknowledgments at end of Snow
          Crash).  Apparently, it's only a simplified web page treatment, not a detailed programming
          manual.  There was a book, but it sells used for e.g. $230; it is supposed to be an
          in-demand classic and was written a few decades ago.
            - https://developer.apple.com/design/human-interface-guidelines/

    - Sprinklers
        - ESP32
            - Use with the RS485 boards (under $10 for each) would be a nice way to construct a
              sprinkler controller.  The ESP32 would be a stand-alone controller, but would allow
              serial communication with another ESP32 chip in the house in my office; the connection
              could be made over wifi.  This would allow modifying the stored program of the
              controller, interrupting things, etc.  In fact, a simple approach would be to provide
              a command line interface for controlling the remote chip and to get status.
            - Unfortunately, it appears this chip can only be accessed from Windows, as you need to
              download a driver for it.
            - I'd like to see the stand-alone processor have a switch that selects automatic mode or
              manual mode.  In manual mode, there's a pushbutton switch for each sprinkler to turn
              on, along with the pump.
            - Since these chips also support bluetooth, there should be an app to control their
              settings via bluetooth also.  This means you could do sprinkler control from your
              phone.
            - Maybe the only interface needed would be a serial connection in one of the rooms.
              Then you connect a computer to it for control and settings.  All that's needed is a
              9600 baud connection for text messages.
        - Raspberry Pi
            - Running python could work well for this setup.  PyPi has a FSM in that could be made
              to work.
            - Build a simulator with the FSM and have it present a web page interface

    - Markdown 
        - Useful concept, but I find all of the markdown syntaxes annoying and badly inconsistent
          (everyone writes their own syntax with relatively small changes from others').  Should I
          write my own syntax, falling prey to the same inconsistency desires?  My motivation would
          be that I get to define my own syntax to do the tasks I do a lot.
        - Strategic
            - What are fundamental use cases?
            - What are output file types?
            - What are needed formatting structures?
        - All markup will be in 'fenced' areas, meaning a beginning and ending string identify the
          fence.  
            - Example:  The strings "≪" and "≫" provide left and right fences.
            - A fundamental rule is that these strings ALWAYS mean a fence and escaping them with a
              backslash has no special meaning.
                - This is convenient for processing, as all markup can be found by searching for
                  these characters.
                    - regexp is re.compile(r"(≪.*≫)", re.M)
                - A simple FSM can be had by reading each character.  When you encounter ≪, you're
                  in interpret_markup mode and when you encounter ≫, you're in regular_text mode.
            - If you want to use these character strings verbatim in your text, you must define an
              alias for them.
        - A fenced area starts with a keyword
            - sub defines a substitution (it can call a python function if desired)
            - '{' and '}' define python code blocks

    - Tabulation tool
        - https://pypi.org/project/tabulate/ has some ideas.  Basically, it takes a nested list and
          tabulates it.  headers kw can be used for column titles.  tablefmt kw describes formatting
          to use.  Default is to use pandoc's simple_tables: https://pandoc.org/MANUAL.html#tables.
          There's also a multiline_tables format.
        - Want a module that is used to produce tabular data reports.
        - The basic interface is that it's fed a list of row vectors that you want to be column
          vectors.  It prints out the transpose after adjusting things to your tastes.
        - It uses Len to ignore escape sequences for colorizing.
        - Would be nice to be able to address the attributes of each column.
            - col[0].width = 12
            - col[0].just = "c"     # Justification
            - col[0].hfill = "-"    # Separation from header
            - col[0].tfill = "-"    # Separation from trailer
        - You could also use a syntax like col.width = 12 to set the defaults for each of the
          columns.  Then col[0].width = 13 would override the default.
        - Should each tabulation instance be a matrix?  Then has some machinery behind the needs.
          Most useful is that you can address individual elements.  And it can't be a matrix without
          being a properly-formed nested list.
        - Desired features
            - Specify spacings between columns (either fixed or irregular)
            - Specify strings between columns for borders (they can be considered another column)
            - Fill to a given screen width, truncate columns to fit, or raise exception that it
              won't fit
            - Line up decimal points for reports
            - Coalesced columns?  Complicated; other formatters like pandoc often don't support.
        - Simple use case
            - col0 = ["Sides", "4", 5"]
            - col1 = ["d", "1.000", "1.000"]
            - col2 = ["D", "1.414", "1.236"]
            - col3 = ["a", "1.000", "0.7265"]
            - col4 = ["Area", "1.000", "0.9082"]
            - Results in the report (centering is default):
            - Sides     d       D       a     Area
            - 4     1.000   1.414   1.000   1.000
            - 5     1.000   1.236  0.7265  0.9082

    - Astronomy
        - Planets
            - Prints out properties of planets and moons
            - Allows you to choose units
                - Moons' mass in Earth moon's mass
                - Planet mass in other planet masses or sun mass
        - Asteroids
            - Construct a numerical model of the asteroids and use it to perform a Monte Carlo
              simulation of flying through the asteroid belt.
                - Basic question is how often does a collision with the spacecraft happen?
            - All the asteroids' mass is 3% of the moon.  50% of that is in the four largest Ceres,
              Vesta, Pallas, and Hygiea; the rest is distributed through an orbit 2e9 km around.
                - Fit a mass distribution from
                  https://en.wikipedia.org/wiki/List_of_exceptional_asteroids#Most_massive
                - Asteroid densities: https://astrostatistics.psu.edu/datasets/asteroid_dens.dat 1
                  to 5 would be representative.  Rocky cores are 3 to 5.
                - https://en.wikipedia.org/wiki/Standard_asteroid_physical_characteristics discusses
                  some approximations.
            - As usual, Hollywood's representations of reality suck.  Typical movie representations
              of asteroids look like Saturn's rings, but in truth they are spread so far apart you'd
              likely not be able to see other asteroids with your naked eye, at least to distinguish
              them from faint stars.
            - In fact, it's essentially a one-dimensional problem.  Assume the trajectory is a
              straight line.  Then you move at constant velocity through the asteroid field,
              encountering asteroids with a random distance from the axis and a random diameter.  At
              each time step, it's easy to calculate whether there is a collision or not.
            - From the picture https://en.wikipedia.org/wiki/File:InnerSolarSystem-en.png, the
              trapezoidal distribution would be a decent first choice
              https://en.wikipedia.org/wiki/Trapezoidal_distribution.

    - Sundial
        - Would be fun to build one
        - Impressive one is in https://sundials.org/index.php/sundial-registry/selectdials/ID.html
          https://sundials.org/index.php/sundial-registry/onedial/344 in Ann Morrison park.
          Indicates time to 15 s, true time to the minute, date to the day, and adusts for daylight
          saving time.
        - https://sundials.org/index.php/nass-shop2/2-publications $30 to get the NASS repository,
          800 MB of documentation

    - ASCII plotting in terminal window
        - plotext is my tool of choice https://pypi.org/project/plotext
            - Made to look similar to matplotlib
        - Others found
        - plotille 'pip install plotille'
        - gnuplot could be suitable, as it does ASCII plotting
            - https://github.com/nschloe/termplotlib relies on gnuplot, but is a python lib
        - https://github.com/olavolav/uniplot
        - https://pypi.org/project/terminalplot/
        - https://github.com/nschloe/termplotlib
        - https://github.com/tammoippen/plotille

g library
    - Update to a more thought-through library form
        - Should contain a back end that renders in the desired form
            - PDF and PNG would be most-used end forms
            - SVG to let further processing be done with Inkscape
            - Note Inkscape can do command-line conversions.  I have 1.1 installed on my system;
              current is 1.3.2.
        - Don't try for every graphics feature
            - https://inkscape.org/about/features/ has a good list of things to think about adding
            - My main use cases seem to be line drawings with text placement (e.g. periodic table)

    - SVG replacement for g library
        - Use Inkscape as viewer for the stuff I generate
        - A huge weakness with the g library is that there's no GSView available anymore -- it was
          an excellent tool and disappeared with no warning.  The POS that replaced it was horribly
          underpowered and that seems to have disappeared too.
        - A core fact is SVG is XML and it can be put into an HTML page.  This means a browser can
          be used to view the output.
        - Consider writing it
            - https://www.codedrome.com/svg-library-in-python/
            - This might outline a good approach and something I can write myself.  It might even
              show a way to rearchitect the g library to have PS and SVG backends.
        - First look through a web search of 'svg python library'
            - drawsvg2
                - https://github.com/cduck/drawSvg
            - drawsvg
                - https://pypi.org/project/drawsvg/ looks attractive and can be installed with pip,
                  but you need cairo installed to render to PNG, MP4, and GIF.
            - svg
                - https://pypi.org/project/svg.py/ Looks more lightweight, may be all I need, pure
                  python.
                - Probably best to get here:
                    - https://github.com/orsinium-labs/svg.py
                    - Just clone the repository
                - It's under MIT license, so I could clone it easily and provide my own stuff.
            - svglib
                - https://pypi.org/project/svglib/
                - Converts SVG files to ReportLab toolkit
                - Might be worth a look because https://docs.reportlab.com/ says their open source
                  PDF Tookit could be what I need to get PDFs.  It appears their 4.0 software is
                  written in pure python.
                - Their documentation is poor, as there's no link to click on to get an overview of
                  their tools
            - svgwrite
                - https://pypi.org/project/svgwrite/
                - http://github.com/mozman/svgwrite.git, inactive with no new development
                - https://svgwrite.readthedocs.io/en/latest/overview.html
                - Docs look shallow, typical single developer stuff without high level stuff
                - pip install svgwrite
            - CairoSVG can convert SVG to PDF and PNG
                - https://cairosvg.org/
                - pip3 install cairosvg
                - https://cairosvg.org/documentation/#installation

wb.py

    Wheatstone bridge exploration tool

    You'd provide a script containing the parameters of the bridge
        
        Vin
        Vout
        Rlt     Left arm, top resistor
        Rlb     Left arm, bottom resistor
        Rrt     Right arm, top resistor
        Rrb     Right arm, bottom resistor

    Example:
        
        Vin: voltage_in_V [unc]
        Rlt: resistance_in_ohms [unc]
        etc.

    The line that is left blank is the dependent variable.  You can specify numbers with cuddled SI
    prefixes.  If unc is given, it's either a number with optional cuddled SI prefix or a
    percentage.  If you use u or μ, then it's in ppm.

    The tool is set up so that when the script's last modification time changes, the output is
    recalculated and printed to stdout.

    Output report

    Wheatstone bridge calculations
        Data file = <name>
        Last modification time = <time>
        MD5 hash = <hash>

        Input data:
            Vin  = 
            Vout =
            Rlt  =
            Rlb  =
            Rrt  =
            Rrb  =

        Calculated data:
            Unknown = 
        Derivatives of unknown wrt known variables

    If uncertainties are given, then the calculations are done with the python uncertainties
    library.

Programmer's index  xxpgidx

    - I have too many functions & software tools
        - Function
        - Class
        - Compiled programs
        - Scripts
    - Use cases
        - Find my tool for running make/script when the modtime of a file changes
        - Needs to index by programming language
            - Majority will be python, some C, a few sh/awk/fortran/basic/etc.
        - Want an integer sequence
            - n elements, equally distributed between elements, generator
            - Gives util.iDistribute 
    - util.py
        - I like the format of e.g. "AcceptableDiff        Returns False if two numbers are not
          equal"
        - The one/two line description could be the default, but detailed documentation could 
          also be given with an option; this would be useful while programming.
    - Scanning tool
        - Flags:  #∞, #🝖, etc.
        - #∞ used for file-level descriptions 
        - #🝖 used for function-level descriptions 
        - #ϵ, #϶ to delineate a text block
            - A block should be formatted by my standard text formatting tool

Game for the goils

    https://www.adventuregamestudio.co.uk/ provides a studio to develop an adventure game.  It
    sounds like something that would be straightforward to develop games for Tiny & Pepper.

